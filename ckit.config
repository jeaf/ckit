array_int
{
    template { array }
    type     { int   }
}

test_struct
{
    include { test_struct.h }
    print   { print_test_struct(\1); }
}

array_test_struct
{
    template { array }
    type     { test_struct }
}

point
{
    struct
    {
        double x
        double y
        double z
    }
    print
    {
        printf("(%.1f, %.1f, %.1f)", \1.x, \1.y, \1.z);
    }
    ctor { memset(&\1, 0, sizeof(point)); }
    lessthan { \1.z < \2.z }
}

array_point
{
    template { array }
    type     { point }
}

model
{
    struct
    {
        unsigned    id
        array_point pts
    }
    print
    {
        printf("model %d: ", \1.id);
        array_point_print(&\1.pts);
    }
    ctor { array_point_ctor(&\1.pts); \1.id = 0; }
    dtor { array_point_dtor(&\1.pts); }
}

array_model
{
    template { array }
    type     { model }
}

heap_int
{
    template { heap }
    type     { int  }
}

heap_point
{
    template { heap  }
    type     { point }
}

key_struct
{
    struct
    {
        int a
        int b
    }
    hash   { \1.a & \1.b }
    equals { (\1.a == \2.a && \1.b == \2.b) }
    print
    {
        printf("(%d, %d)", \1.a, \1.b);
    }
}

hashtbl_int
{
    template { hashtbl    }
    key_type { key_struct }
    type     { int        }
}

deque_double
{
    template { deque_circbuf }
    type     { double }
}

UserInputEnum
{
    enum
    {
        UIE_MOUSEDOWN,
        UIE_MOUSEUP,
        UIE_LEFTCLICK
    }
    print
    {
        printf("%d", \1);
    }
}

deque_ui
{
    template { deque_circbuf }
    type     { UserInputEnum }
}

